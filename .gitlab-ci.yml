  stages:
    # - prepare
    # - test_build
    - deploy

  variables:
    GIT_DEPTH: "0"

  # generate_tag:
  #   stage: prepare
  #   script:
  #     - chmod +x ./parseCommitToTag.sh
  #     - ./parseCommitToTag.sh > tag.txt
  #   artifacts:
  #     paths:
  #       - tag.txt

  # test_build_server:
  #   stage: test_build
  #   image: node:20.10.0-alpine
  #   cache:
  #     key: ${CI_COMMIT_REF_SLUG}-node-modules
  #     paths:
  #       - frontend/node_modules/
  #   script:
  #     - cd server
  #     - npm ci
  #     - npm run test
  #     - npm run lint

  # test_build_frontend:
  #   stage: test_build
  #   image: node:20.10.0-alpine
  #   cache:
  #     key: ${CI_COMMIT_REF_SLUG}-node-modules
  #     paths:
  #       - frontend/node_modules/
  #   script:
  #     - cd frontend
  #     - npm ci
  #     - npm install --save-dev @angular/cli
  #     - apk update && apk add chromium
  #     - export CHROME_BIN=/usr/bin/chromium-browser
  #     # Set CHROME_BIN to the path of the installed Chromium binary
  #     - npx ng test --no-watch --no-progress --browsers=ChromeHeadlessNoSandbox
  #     - npm run lint
  #     - npx ng build --configuration=production

    # artifacts:
    #   paths:
    #     - frontend/dist/

  deploy:
    stage: deploy
    # image: docker:24.0.7-dind
    image: alpine:3.19.1
    services:
      # - docker:dind
      - docker


    before_script:
      - echo "Installing necessary dependencies..."
      - apk add --no-cache docker-compose openssh-client

      - "echo Logging into DockerHub..."
      - echo "$DOCKER_HUB_ACCESS_TOKEN" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

      - "echo SSH INTO DROPLET"
      - eval $(ssh-agent -s)
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
      - mkdir -p ~/.ssh
      - chmod 700 ~/.ssh

      - "echo Add droplet IP to known hosts to avoid interactive prompt"
      - ssh-keyscan $DROPLET_IP >> ~/.ssh/known_hosts
      - chmod 644 ~/.ssh/known_hosts
      - chmod +x ./deploy.sh

    script:
      - |
        echo "Checking for tag.txt file..."
        if [ ! -f "tag.txt" ] || [ ! -s "tag.txt" ]; then
          echo "Error: tag.txt file is missing or empty"
          exit 1
        fi

      - |
        echo "Reading GENERATED_TAG from tag.txt..."
        export GENERATED_TAG=$(cat tag.txt) || exit 1

      - |
          if [ -z "$GENERATED_TAG" ]; then
            echo "Error: Generated tag is empty.";
            exit 1;
          else
            echo "Tag extracted: $GENERATED_TAG";
          fi || exit 1
          echo "Tag extracted: $GENERATED_TAG"

      - |
        echo "Checking if GENERATED_TAG satisfies the <feature>-<feature-name>-<size> format..."
        if [ -z "$GENERATED_TAG" ]; then
            echo "Commit violates <feature>-<feature-name>-<size> format required for proper docker image tagging";
            exit 1;
        fi

      - |
        echo "Using docker-compose to build the updated images in the repository..."
        docker-compose -f docker-compose.yaml build --no-cache || exit 1

      - |
          echo DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME
          echo GENERATED_TAG: $GENERATED_TAG
          echo "Pushing the built images with the generated tag: $GENERATED_TAG"


      - |
        if docker push $DOCKER_HUB_USERNAME/sang-logium-frontend:$GENERATED_TAG; then
            echo "Frontend Image successfully pushed to DockerHub";
        else
            echo "Failed to push image to DockerHub";
            exit 1;
        fi

      - |
        if docker push $DOCKER_HUB_USERNAME/sang-logium-server:$GENERATED_TAG; then
            echo "Server Image successfully pushed to DockerHub";
        else
            echo "Failed to push image to DockerHub";
            exit 1;
        fi


      - |
        if docker push $DOCKER_HUB_USERNAME/sang-logium-database:$GENERATED_TAG; then
            echo "Database Image successfully pushed to DockerHub";
        else
            echo "Failed to push image to DockerHub";
            exit 1;
        fi

      - pwd
      - ls -la
      - ./deploy.sh

    only:
      - main