stages:
  - prepare
  - test
  - build
  - dockerize
  - deploy


prepare:
  stage: prepare
  image: node:20.10.0-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}-node-modules
    paths:
      - frontend/node_modules/
  script:
    - cd frontend
    - npm ci
    - npm install --save-dev @angular/cli
  artifacts:
    paths:
      - frontend/node_modules/


unit_test_frontend:
  stage: test
  image: node:20.10.0-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}-node-modules
    paths:
      - frontend/node_modules/
  script:
    - cd frontend
    - apk update && apk add chromium
    - export CHROME_BIN=/usr/bin/chromium-browser  # Set CHROME_BIN to the path of the installed Chromium binary
    - npx ng test --no-watch --no-progress --browsers=ChromeHeadlessNoSandbox


lint_frontend:
  stage: test
  image: node:20.10.0-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}-node-modules
    paths:
      - frontend/node_modules/
  script:
    - cd frontend
    - npm run lint


build_dist:
  stage: build
  image: node:20.10.0-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}-node-modules
    paths:
      - frontend/node_modules/
  script:
    - cd frontend
    - npx ng build
  artifacts:
    paths:
      - frontend/dist/


deploy_frontend:
  stage: deploy
  image: docker:24.0.7-dind
  services:
    - docker:dind


  before_script:
    # Install necessary dependencies
    - apk add --no-cache docker-compose openssh-client

    # DockerHub login for pushing the image
    - echo "$DOCKER_HUB_ACCESS_TOKEN" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

    # Setup SSH agent for secure connection to the droplet
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    # Add droplet IP to known hosts to avoid interactive prompt
    - ssh-keyscan $DROPLET_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts


  script:
    # Build the Docker image using docker-compose
    - docker-compose -f docker-compose.yaml build sang-logium-frontend

    # Tag and push the built image to DockerHub
    - docker tag sang-logium-frontend $DOCKER_HUB_USERNAME/sang-logium-frontend:latest
    - docker push $DOCKER_HUB_USERNAME/sang-logium-frontend:latest

    # SSH into the droplet, pull the latest image, and run docker-compose to update the services
    - ssh -o StrictHostKeyChecking=no root@$DROPLET_IP "docker pull $DOCKER_HUB_USERNAME/sang-logium-frontend:latest && docker-compose -f /root/sang-logium/docker-compose.yaml up -d"


  only:
    - main
