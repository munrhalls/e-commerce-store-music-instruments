    stages:
      # - pre-flight-checks
      - prepare
      # - test_build
      - deploy


    # pre_flight_checks:
    #   stage: pre-flight-checks
    #   image: docker:25.0.3-dind-alpine3.19
    #   services:
    #     - docker:dind
      # script:
        # - |
        #     echo "Directory Existence and Content Validation"
        #     if [ ! -d "/root/sang-logium/database" ]; then
        #       echo "Database directory '/root/sang-logium/database' not found"
        #       exit 1
        #     fi
        #     if [ -z "$(ls -A /root/sang-logium/database)" ]; then
        #       echo "Database directory '/root/sang-logium/database' is empty."
        #       exit 1
        #     fi
        #     ls -ld /root/sang-logium/database || { echo "Cannot access database directory '/root/sang-logium/database'."; exit 1; }
        # - |
        #   echo "Docker Daemon Availability Check"
        #   docker info > /dev/null 2>&1
        #   if [ $? -ne 0 ]; then
        #     echo "Docker daemon not running."
        #     exit 1
        #   fi
        # - |
        #   # Environment Variables Validation
        #   required_vars=("VARIABLE_1" "VARIABLE_2" "VARIABLE_3")  # Replace these with actual variable names
        #   for var in "${required_vars[@]}"; do
        #     if [ -z "${!var}" ]; then  # Indirect parameter expansion to check if variable is set
        #       echo "$var is not set."
        #       exit 1
        #     fi
        #   done

    variables:
      GIT_DEPTH: "0"
      GENERATED_TAG: ""

    # generate_tag:
    #   stage: prepare
    #   script:
    #     - chmod +x ./parseCommitToTag.sh
    #     - ./parseCommitToTag.sh > GENERATED_TAG
    #   artifacts:
    #     paths:
    #       - tag.txt

    # test_build_server:
    #   stage: test_build
    #   image: node:20.10.0-alpine
    #   cache:
    #     key: ${CI_COMMIT_REF_SLUG}-node-modules
    #     paths:
    #       - frontend/node_modules/
    #   script:
    #     - cd server
    #     - npm ci
    #     - npm run test
    #     - npm run lint

    # test_build_frontend:
    #   stage: test_build
    #   image: node:20.10.0-alpine
    #   cache:
    #     key: ${CI_COMMIT_REF_SLUG}-node-modules
    #     paths:
    #       - frontend/node_modules/
    #   script:
    #     - cd frontend
    #     - npm ci
    #     - npm install --save-dev @angular/cli
    #     - apk update && apk add chromium
    #     - export CHROME_BIN=/usr/bin/chromium-browser
    #     # Set CHROME_BIN to the path of the installed Chromium binary
    #     - npx ng test --no-watch --no-progress --browsers=ChromeHeadlessNoSandbox
    #     - npm run lint
    #     - npx ng build --configuration=production

      # artifacts:
      #   paths:
      #     - frontend/dist/

    generate_tag_for_deployed_images:
      stage: prepare
      script:
      # IMPORTANT: Not a git tag, this tag is parsed commit message.
      - chmod +x ./parseCommitToTag.sh
      - GENERATED_TAG=$(./parseCommitToTag.sh)
      - echo "GENERATED_TAG=$(./parseCommitToTag.sh)" >> tag.env
      - echo "GENERATED_TAG for docker images is ${GENERATED_TAG}"
      artifacts:
        reports:
          dotenv: tag.env

    deploy:
      stage: deploy
      image: docker:25.0.3-dind-alpine3.19
      services:
        - docker:dind
      before_script:
        - |
          if [ -z "$GENERATED_TAG" ]; then echo "Error: Generated tag is empty."; exit 1; fi
        - echo "GENERATED_TAG for docker images is '${GENERATED_TAG}'"
        - echo "DOCKER_HUB_USERNAME -> ${DOCKER_HUB_USERNAME}"
        - |
          echo "Installing necessary dependencies..."
          apk add --no-cache docker-compose openssh-client
          echo "Checking if docker-compose is installed..."
          docker-compose --version || echo "Error: docker-compose is not installed or failed to execute."

        - |
          echo "Logging into DockerHub..."
          echo "$DOCKER_HUB_ACCESS_TOKEN" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin

        - |
          echo "SSH INTO DROPLET"
          eval $(ssh-agent -s)

        - |
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

        - |
          echo "Add droplet IP to known hosts to avoid interactive prompt"
          ssh-keyscan $DROPLET_IP >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

        - chmod +x ./deployValidate.sh
        - chmod +x ./deploy.sh
      script:

        # BUILD & PUSH IMAGES TO DOCKER HUB
        - |
          echo "Using docker-compose to build the updated images in the repository..."
          docker-compose -f docker-compose.yaml build --no-cache || exit 1

        - |
            echo "DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME. Pushing the built images with the generated tag: $GENERATED_TAG"

        - |
          if docker push $DOCKER_HUB_USERNAME/sang-logium-frontend:$GENERATED_TAG; then
              echo "Frontend Image successfully pushed to DockerHub";
          else
              echo "Failed to push image to DockerHub";
              exit 1;
          fi

        - |
          if docker push $DOCKER_HUB_USERNAME/sang-logium-server:$GENERATED_TAG; then
              echo "Server Image successfully pushed to DockerHub";
          else
              echo "Failed to push image to DockerHub";
              exit 1;
          fi

        - |
          if docker push $DOCKER_HUB_USERNAME/sang-logium-database:$GENERATED_TAG; then
              echo "Database Image successfully pushed to DockerHub";
          else
              echo "Failed to push image to DockerHub";
              exit 1;
          fi

        - pwd
        - ls -la

        # SSH INTO DROPLET PC: PULL IMAGES FROM DOCKERHUB, RUN DOCKER-COMPOSE
        - chmod x+ ./docker-compose.yaml
        - ssh root@$DROPLET_IP << EOF
            echo "Deploy script running..."
            scp /root/sang-logium/docker-compose.yaml root@$DROPLET_IP:/root/sang-logium/docker-compose.yaml
            export GENERATED_TAG=${GENERATED_TAG}
            export MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
            export MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
            export MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
            export MONGO_URI=${MONGO_URI}
            export DATA_SERVER_NODE_ENV=${DATA_SERVER_NODE_ENV}
            export DATA_SERVER_PORT=${DATA_SERVER_PORT}
            cd /root/sang-logium
            docker-compose pull && docker-compose up -d
          EOF

      only:
        - main